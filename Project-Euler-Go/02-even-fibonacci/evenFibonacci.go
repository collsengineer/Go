/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

package main

import (
	"fmt"
)

func main() {
	// Modify seqLength to increase or decrease the Fib. sequence
	var seqLenght int
	fmt.Print("Sequence's length: ")
	fmt.Scanln(&seqLenght)

	// Instantiating empty slice to store Fibonacci sequence
	fibSeq := make([]int, seqLenght)

	// Completing Fibonacci sequence
	for i := 1; i <= seqLenght; i++ {
		fibSeq = append(fibSeq, fib(i))
	}

	// Calculating the sum of even values
	total := 0
	for i := 0; i < len(fibSeq); i++ {
		if fibSeq[i]%2 == 0 {
			total += fibSeq[i]
		}
	}

	fmt.Printf("Sum of even Fibonacci values: %d\n", total)
}

// fib: calculates the nth Fibonacci number using recursion
func fib(n int) int {
	if n == 0 || n == 1 {
		return 1
	}
	return fib(n-1) + fib(n-2)
}
