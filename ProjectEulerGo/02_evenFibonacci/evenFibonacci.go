/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

package main

import (
	"fmt"
)

func main() {
	// Modify seqLength to increase or decrease the Fib. sequence
	var seqLength int
	fmt.Print("Sequence's length: ")
	fmt.Scanln(&seqLength)

	// fibSequence: Slice to store regular Fibonacci sequence numbers.
	fibSequence := []int{}

	var totalSum int = 0

	for i := 1; i <= seqLength; i++ {
		fibSequence = append(fibSequence, FibonacciRecursive(i))
	}

	for _, value := range fibSequence {
		if value%2 == 0 {
			totalSum += value
		}
	}

	fmt.Println("Total even-valued sum:", totalSum)
}

func FibonacciRecursive(n int) int {
	// Fibonacci sequence by recursive algorithm. Returns just the last value.
	if n == 0 || n == 1 {
		return 1
	}
	return FibonacciRecursive(n-1) + FibonacciRecursive(n-2)
}
